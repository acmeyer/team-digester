generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(dbgenerated("nanoid(14)"))
  slackId    String   @unique
  name       String?
  firstName  String?
  lastName   String?
  email      String?
  pictureUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organizations               Organization[]
  teams                       Team[]
  integrationProviderAccounts IntegrationProviderAccount[]
}

model Organization {
  id                String   @id @default(dbgenerated("nanoid(14)"))
  name              String?
  slackId           String   @unique
  isSlackEnterprise Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  teams                  Team[]
  members                User[]
  slackInstallations     SlackInstallation[]
  integrationConnections IntegrationProviderAccount[]
}

model SlackInstallation {
  id                  String   @id @default(dbgenerated("nanoid(14)"))
  slackId             String   @unique
  isEnterpriseInstall Boolean  @default(false)
  installation        Json
  organizationId      String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String   @id @default(dbgenerated("nanoid(14)"))
  name           String?
  slackId        String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  members      User[]
}

model IntegrationApplication {
  id           String   @id @default(dbgenerated("nanoid(14)"))
  name         String
  description  String
  authorizeUrl String
  logoUrl      String?
  callbackUrl  String
  clientId     String
  clientSecret String
  scope        String?
  provider     String
  tokenUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  integrationProviderAccounts IntegrationProviderAccount[]
}

model IntegrationProviderAccount {
  id                       String   @id @default(dbgenerated("nanoid(14)"))
  provider                 String
  uid                      String?
  data                     Json
  accessToken              String?
  refreshToken             String?
  expiresIn                Int?
  scope                    String?
  userId                   String
  integrationApplicationId String
  organizationId           String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  integrationApplication IntegrationApplication @relation(fields: [integrationApplicationId], references: [id])
  user                   User                   @relation(fields: [userId], references: [id])
  organization           Organization           @relation(fields: [organizationId], references: [id])
}
