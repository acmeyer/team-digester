generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  daily
  weekly
  monthly
}

model User {
  id         String   @id @default(dbgenerated("nanoid(14)"))
  slackId    String   @unique
  name       String?
  firstName  String?
  lastName   String?
  email      String?
  pictureUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organizations               Organization[]
  integrationProviderAccounts IntegrationProviderAccount[]
  teamMemberships             TeamMembership[]             @relation("TeamMemberships")
  addedTeamMemberships        TeamMembership[]             @relation("AddedTeamMembers")
  notificationSettings        NotificationSetting[]
}

model NotificationSetting {
  id        String           @id @default(dbgenerated("nanoid(14)"))
  userId    String
  type      NotificationType
  timing    String
  isEnabled Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model Organization {
  id                String   @id @default(dbgenerated("nanoid(14)"))
  name              String?
  slackId           String   @unique
  isSlackEnterprise Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  teams                  Team[]
  members                User[]
  slackInstallations     SlackInstallation[]
  integrationConnections IntegrationProviderAccount[]
}

model SlackInstallation {
  id                  String   @id @default(dbgenerated("nanoid(14)"))
  slackId             String   @unique
  isEnterpriseInstall Boolean  @default(false)
  installation        Json
  organizationId      String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Team {
  id             String   @id @default(dbgenerated("nanoid(14)"))
  name           String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMembership[]
}

model TeamMembership {
  id        String   @id @default(dbgenerated("nanoid(14)"))
  teamId    String
  userId    String
  addedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    User  @relation("TeamMemberships", fields: [userId], references: [id], onDelete: Cascade)
  addedBy User? @relation("AddedTeamMembers", fields: [addedById], references: [id])

  @@unique([teamId, userId])
}

model IntegrationProviderAccount {
  id             String   @id @default(dbgenerated("nanoid(14)"))
  provider       String
  uid            String?
  username       String?
  name           String?
  email          String?
  pictureUrl     String?
  rawAuthData    Json?
  rawProfileData Json?
  accessToken    String?
  refreshToken   String?
  expiresIn      Int?
  scope          String?
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
